let Post,mongoose,Joi,text;_c47‍.x([["getPostById",()=>getPostById],["checkObjectId",()=>checkObjectId],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_c47‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_c47‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_c47‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_c47‍.w("express",[["text",["text"],function(v){text=v}]]);




const {ObjectId}=mongoose.Types;

       const getPostById=async(ctx,next)=>{
  const {id}=ctx.params;
  if(!ObjectId.isValid(id)){
    ctx.status=400;
    return;
  }
  try{
    const post=await Post.findById(id);

    if(!post){
      ctx.status=404;
      return;
    }
    ctx.state.post=post;
    return next();
  }catch(e){
    ctx.throw(500,e);
  }
}

       const checkObjectId=(ctx,next)=>{
  const {id}=ctx.params;
  if(!ObjectId.isValid(id)){
    ctx.status=400;
    return;
  }
  return next();
};

       const write=async ctx=>{
  const schema=Joi.object().keys({
    title:Joi.string().required(),
    body:Joi.string().required(),
    tags:Joi.array().items(Joi.string()).required(),  //이렇게 하면 Request Body에 필요한 필드가 빠지면 오류가 난다
  });
  const {title,body,tags}=ctx.request.body;
  const post=new Post({
    title,
    body,
    tags,
    user:ctx.state.user,
  });
  try{
    await post.save();
    ctx.body=post;
  }catch(e){
    ctx.throw(500,e);
  }
}

       const list=async ctx=>{

  const page=parseInt(ctx.query.page || '1',10);

  if(page<1){
    ctx.status=400;
    return;
  }

  try{
    const posts=await Post.find().limit(10).skip((page-1)*10).exec();
    const postCount= await Post.countDocuments().exec();
    ctx.set('Last-Page',Math.ceil(postCount/10));
    ctx.body=posts.map(post=>({
      ...post,
      body: post.body.length<200 ? post.body: `${post.body.slice(0,200)}...`,
    }));
    // .sort({_id:-1}) 역순출력
    // .limit(10) 10개제한
    // .skip((page-1)*10)//10이면 첫 10개는 제외하고
    
  }catch(e){
    ctx.throw(500,e);
  }
};

       const read=async ctx=>{
  const {id}=ctx.params;
  try{
    const post=await (await Post.findById(id)).execPopulate();
    if(!post){
      ctx.status=404;
      return;
    }
    ctx.body=post;
  }catch(e){
    ctx.throw(500,e);
  }
};

       const remove=async ctx=>{
  const {id}=ctx.params;
  try{
    await Post.findByIdAndRemove(id).exec();
    ctx.status=404;
  }catch(e){
    ctx.throw(500,e);
  }
};

       const update= async ctx=>{
  const {id}=ctx.params;

  const schema=Joi.object().keys({
    title:Joi.string(),
    body:Joi.string(),
    tags:Joi.array().items(Joi.string()),
  });

  const result=Joi.validate(ctx.request.body,schema);
  if(result.error){
    ctx.status=400;
    ctx.body=result.error;
    return;
  }

  try{
    const post=await Post.findByIdAndUpdate(id,ctx.request.body,{
      new:true,
    }).exec();
    if(!post){
      ctx.status=404;
      return;
    }
    ctx.body=post;
  }catch(e){
    ctx.throw(500,e)
  }
}

































// let postId = 1; // id의 초깃값입니다.

// // posts 배열 초기 데이터
// const posts = [
//   {
//     id: 1,
//     title: '제목',
//     body: '내용',
//   },
// ];

// /* 포스트 작성
// POST /api/posts
// { title, body }
// */
// exports.write = ctx => {
//   // REST API의 request body는 ctx.request.body에서 조회할 수 있습니다.
//   const { title, body } = ctx.request.body;
//   postId += 1; // 기존 postId 값에 1을 더합니다.
//   const post = { id: postId, title, body };
//   posts.push(post);
//   ctx.body = post;
// };

// /* 포스트 목록 조회
// GET /api/posts
// */
// exports.list = ctx => {
//   ctx.body = posts;
// };

// /* 특정 포스트 조회
// GET /api/posts/:id
// */
// exports.read = ctx => {
//   const { id } = ctx.params;
//   // 주어진 id 값으로 포스트를 찾습니다.
//   // 파라미터로 받아 온 값은 문자열 형식이니 파라미터를 숫자로 변환하거나,
//   // 비교할 p.id 값을 문자열로 변경해야 합니다.
//   const post = posts.find(p => p.id.toString() === id);
//   // 포스트가 없으면 오류를 반환합니다.
//   if (!post) {
//     ctx.status = 404;
//     ctx.body = {
//       message: '포스트가 존재하지 않습니다.',
//     };
//     return;
//   }
//   ctx.body = post;
// };

// /* 특정 포스트 제거
// DELETE /api/posts/:id
// */
// exports.remove = ctx => {
//   const { id } = ctx.params;
//   // 해당 id를 가진 post가 몇 번째인지 확인합니다.
//   const index = posts.findIndex(p => p.id.toString() === id);
//   // 포스트가 없으면 오류를 반환합니다.
//   if (index === -1) {
//     ctx.status = 404;
//     ctx.body = {
//       message: '포스트가 존재하지 않습니다.',
//     };
//     return;
//   }
//   // index번째 아이템을 제거합니다.
//   posts.splice(index, 1);
//   ctx.status = 204; // No Content
// };

// /* 포스트 수정(교체)
// PUT /api/posts/:id
// { title, body }
// */
// exports.replace = ctx => {
//   // PUT 메서드는 전체 포스트 정보를 입력하여 데이터를 통째로 교체할 때 사용합니다.
//   const { id } = ctx.params;
//   // 해당 id를 가진 post가 몇 번째인지 확인합니다.
//   const index = posts.findIndex(p => p.id.toString() === id);
//   // 포스트가 없으면 오류를 반환합니다.
//   if (index === -1) {
//     ctx.status = 404;
//     ctx.body = {
//       message: '포스트가 존재하지 않습니다.',
//     };
//     return;
//   }
//   // 전체 객체를 덮어씌웁니다.
//   // 따라서 id를 제외한 기존 정보를 날리고, 객체를 새로 만듭니다.
//   posts[index] = {
//     id,
//     ...ctx.request.body,
//   };
//   ctx.body = posts[index];
// };

// /* 포스트 수정(특정 필드 변경)
// PATCH /api/posts/:id
// { title, body }
// */
// exports.update = ctx => {
//   // PATCH 메서드는 주어진 필드만 교체합니다.
//   const { id } = ctx.params;
//   // 해당 id를 가진 post가 몇 번째인지 확인합니다.
//   const index = posts.findIndex(p => p.id.toString() === id);
//   // 포스트가 없으면 오류를 반환합니다.
//   if (index === -1) {
//     ctx.status = 404;
//     ctx.body = {
//       message: '포스트가 존재하지 않습니다.',
//     };
//     return;
//   }
//   // 기존 값에 정보를 덮어씌웁니다.
//   posts[index] = {
//     ...posts[index],
//     ...ctx.request.body,
//   };
//   ctx.body = posts[index];
// };
