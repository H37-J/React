let Joi,User;_7ab‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_7ab‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_7ab‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);


/*
  POST /api/auth/register
  {
    username: 'velopert',
    password: 'mypass123'
  }
*/
       const register = async ctx => {
  // Request Body 검증하기
  const schema = Joi.object().keys({
    username: Joi.string()
      .alphanum()
      .min(3)
      .max(20)
      .required(),
      password: Joi.string().required(),
  });


  const { username, password } = ctx.request.body;
  try {
    // username  이 이미 존재하는지 확인
    const exists = await User.findByUsername(username);
    if (exists) {
      ctx.status = 409; // Conflict
      return;
    }

    const user = new User({
      username,
    });
    await user.setPassword(password); // 비밀번호 설정
    await user.save(); // 데이터베이스에 저장

    ctx.body = user.serialize();

    const token = user.generateToken();
    ctx.cookies.set('access_token', token, {
      maxAge: 1000 * 60 * 60 * 24 * 7, // 7일
      httpOnly: true,
    });
  } catch (e) {
    ctx.throw(500, e);
  }
};

       const login=async ctx=>{
    const {username,password}=ctx.request.body;

    if(!username||!password){
        ctx.status=401;
        return;
    }

    try{
        const user=await User.findByUsername(username);

        if(!user){
            ctx.status=401;
            return;
        }
        const valid=await user.checkPassword(password);

        if(!valid){
            ctx.status=401;
            return;
        }
        ctx.body=user.serialize();
        const token=user.generateToken();
        ctx.cookies.set('access_token',token,{
            maxAge:1000 * 60 * 60 * 24 * 7,
            httpOnly:true,
        });
    }catch(e){
        ctx.throw(500,e);
    }
}

       const check=async ctx=>{
    const {user}=ctx.state;
    if(!user){
        ctx.status=401;
        return;
    }
    ctx.body=user

}

       const logout=async ctx=>{
    ctx.cookies.set('access_token');
    ctx.status=204;
};